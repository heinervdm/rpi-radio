project(rpi-radio)
cmake_minimum_required(VERSION 2.6)

find_package(Qt5Core)
find_package(Qt5Widgets)
find_package(Qt5Declarative)
find_package(Qt5SerialPort)
find_package(Phonon)

IF(Qt5Widgets_FOUND AND Qt5Declarative_FOUND AND Qt5SerialPort_FOUND)
	set(QT_LIBRARIES ${Qt5Core_LIBRARIES} ${Qt5Widgets_LIBRARIES} ${Qt5Declarative_LIBRARIES} ${Qt5SerialPort_LIBRARIES} ${PHONON_LIBRARIES})
	set(QT_INCLUDES  ${Qt5Core_INCLUDE_DIRS} ${Qt5Widgets_INCLUDE_DIRS} ${Qt5Network_INCLUDE_DIRS} ${Qt5SerialPort_INCLUDE_DIRS} ${PHONON_LIBRARIES})
	MESSAGE( STATUS "Found Qt5 trying to use it")
	set(QT_FOUND "Qt5")
ELSE(Qt5Widgets_FOUND AND Qt5Declarative_FOUND AND Qt5SerialPort_FOUND)
	find_package(Qt4 REQUIRED QtCore QtGui QtDeclarative Phonon)
	IF(QT_FOUND)
		INCLUDE( ${QT_USE_FILE} )
	ENDIF(QT_FOUND)
ENDIF(Qt5Widgets_FOUND AND Qt5Declarative_FOUND AND Qt5SerialPort_FOUND)

IF(NOT QT_FOUND)
	MESSAGE("Could not find Qt4 or Qt5. Can't build rpi-radio.")
ENDIF(NOT QT_FOUND)

include_directories(${QT_INCLUDES} ${QT_PHONON_INCLUDE_DIR} ${CMAKE_CURRENT_BINARY_DIR} include)

set(rpi-radio_HDRS include/Controls.h include/Button.h include/Encoder.h include/PlayerWidget.h include/GPIO.h)
set(rpi-radio_SRCS src/Controls.cpp src/Button.cpp src/Encoder.cpp src/PlayerWidget.cpp src/GPIO.cpp main.cpp)
if(QT_FOUND STREQUAL "Qt5")
	qt5_wrap_cpp(rpi-radio_MOC ${rpi-radio_HDRS})
	QT5_ADD_RESOURCES(rpi-radio_RESOURCES_RCC rpi-radio.qrc)
else(QT_FOUND STREQUAL "Qt5")
	qt4_wrap_cpp(rpi-radio_MOC ${rpi-radio_HDRS})
	QT4_ADD_RESOURCES(rpi-radio_RESOURCES_RCC rpi-radio.qrc)
endif(QT_FOUND STREQUAL "Qt5")

set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -O2 -g -Wall -pthread -fstack-protector-all -Wstack-protector -Woverloaded-virtual -Wextra -Wshadow -Wsuggest-attribute=noreturn")
if(QT_FOUND STREQUAL "Qt5")
	#-fPIC needed for linking against Qt5
	set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fPIC")
endif(QT_FOUND STREQUAL "Qt5")

add_executable(rpi-radio ${rpi-radio_SRCS} ${rpi-radio_RESOURCES_RCC} ${rpi-radio_MOC})
target_link_libraries(rpi-radio ${QT_LIBRARIES})
install(TARGETS rpi-radio RUNTIME DESTINATION bin)
